import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

# Charger les donn√©es
df = pd.read_csv("sport.csv")

# S√©parer les variables
X = df[["age", "sommeil", "ecran", "energie"]]  # Entr√©es
y = df["sport"]                                 # Sortie

xtrain, xtest, ytrain, ytest = train_test_split(X, y, test_size=0.3, random_state=42)

# Cr√©er et entra√Æner le mod√®le
ia = LogisticRegression()
ia.fit(xtrain, ytrain)

def demander_entier(user_value):
    "Demande un entier √† l'utilisateur (ex : √¢ge, heures)"
    while True:
        valeur = input(user_value)
        if valeur.isdigit():
            return int(valeur)
        print("‚ùå Entr√©e invalide. Merci d'entrer un nombre entier.")

def demander_energie(user_value):
    "Demande un entier entre 0 et 10 pour le niveau d'√©nergie"
    while True:
        valeur = input(user_value)
        if valeur.isdigit():
            valeur = int(valeur)
            if 0 <= valeur <= 10:
                return valeur
            else:
                print("Merci d‚Äôentrer une valeur entre 0 et 10.")
        else:
            print("Entr√©e invalide. Merci d'entrer un nombre entier.")
            
def predire_sport():

    age = demander_entier("Quel est ton √¢ge ? ")
    sommeil = demander_entier("Combien d'heures de sommeil par nuit ? ")
    ecran = demander_entier("Combien d'heures d'√©cran par jour ? ")
    energie = demander_energie("Sur 10, √† combien √©values-tu ton √©nergie ? ")

    new_data = pd.DataFrame([[age, sommeil, ecran, energie]])

    prediction = ia.predict(new_data)

    if prediction[0] == 1:
        print("Tu fais du sport ! Continue comme √ßa")
    else:
        print("Tu ne sembles pas faire de sport. Il n‚Äôest jamais trop tard üòâ")

if __name__ = "__main__":
    predire_sport()
